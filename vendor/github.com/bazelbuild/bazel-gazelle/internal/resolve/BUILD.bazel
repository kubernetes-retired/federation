load("@io_bazel_rules_go//go:def.bzl", "go_library")

go_library(
    name = "go_default_library",
    srcs = [
        "index.go",
        "resolve.go",
        "resolve_external.go",
        "resolve_vendored.go",
        "std_package_list.go",
    ],
    importpath = "github.com/bazelbuild/bazel-gazelle/internal/resolve",
    visibility = ["//visibility:public"],
    deps = [
        "//vendor/github.com/bazelbuild/bazel-gazelle/internal/config:go_default_library",
        "//vendor/github.com/bazelbuild/bazel-gazelle/internal/label:go_default_library",
        "//vendor/github.com/bazelbuild/bazel-gazelle/internal/pathtools:go_default_library",
        "//vendor/github.com/bazelbuild/bazel-gazelle/internal/repos:go_default_library",
        "//vendor/github.com/bazelbuild/buildtools/build:go_default_library",
    ],
)

# TODO(jayconrod): test that the checked-in static file matches the generated
# file. The generated code is checked in so that Gazelle can still be built
# with "go get".
genrule(
    name = "std_package_list",
    srcs = ["@go_sdk//:packages.txt"],
    outs = ["std_package_list.go"],
    cmd = "$(location //internal/resolve/gen_std_package_list) $< $@",
    tools = ["//internal/resolve/gen_std_package_list"],
)

filegroup(
    name = "package-srcs",
    srcs = glob(["**"]),
    tags = ["automanaged"],
    visibility = ["//visibility:private"],
)

filegroup(
    name = "all-srcs",
    srcs = [":package-srcs"],
    tags = ["automanaged"],
    visibility = ["//visibility:public"],
)
